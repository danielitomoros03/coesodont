- areas = Area.all.order(name: :asc)
- params[:area] ||= areas.first.id
- academic_process_id = academic_process.id

.row
  %ul#area_selector.nav.nav-tabs.flex-column.col-3.p-0
    - areas.each do |area|

      - active_area_tab = (area.id.eql? params[:area].to_i) ? 'active' : 'text-light'
      %li.nav-item.bg-primary
        %a.nav-link.position-relative{:href => "/admin/academic_process/#{academic_process_id}/programation?area=#{area.id}", class: active_area_tab, style: 'font-size: small;'}
          = ApplicationController.helpers.total_sections_stiky area.sections.where('courses.academic_process_id': academic_process_id).count
          = area.name.titleize

  .tab-content.col-9.p-0
    - modalities = Subject.modalities
    - params[:moda] ||= modalities.first[1]
    - areas.each do |area|
      - active_area = (area.id.eql? params[:area].to_i)
      - active_area_cont = active_area ? 'active' : 'text-light'
      - show_area_cont = active_area ? 'show' : ''

      - sections = area.sections.where('courses.academic_process_id': academic_process_id)

      .tab-pane.fade{class: "#{active_area_cont} #{show_area_cont}", role: :tabpanel} 
        %ul#moda_selector.nav.nav-tabs
          - modalities.each do |moda|
            - active_moda = (moda[1].eql? params[:moda].to_i)
            - active_moda = active_moda ? 'active text-primary' : 'text-light'
            - show = active_moda ? 'show' : ''
            %li.nav-item.bg-primary
              %a.nav-link.position-relative{:href => "/admin/academic_process/#{academic_process_id}/programation?area=#{area.id}&moda=#{moda[1]}", class: active_moda, style: 'font-size: small;'}

                = ApplicationController.helpers.total_sections_stiky sections.where('subjects.modality': moda[1]).count
                = moda[0]&.pluralize&.titleize

        .tab-content.border-bottom.border-end.border-start.p-3
          - modalities.each do |moda|
            - if active_area and (moda[1].eql? params[:moda].to_i)
              .tab-pane.fade.active.text-primary.show{role: :tabpanel} 
                %h6.text-primary.text-center
                  = "#{moda[0]&.pluralize&.titleize} de #{area&.name&.titleize}"
                - subjects = academic_process.school.subjects.where(modality: params[:moda], area_id: params[:area]).sort_by_code
                = render partial: '/academic_processes/table_subjects_programation', locals: {subjects: subjects, academic_process_id: academic_process_id}

:javascript

  document.addEventListener("rails_admin.dom_ready", function() {

    // $('.addSection').on('click', function(e){
    //   $('#_sectioncourse_id').val(this.attributes['course_id'].value);
    // });

    $('#filterSubject').on('keyup', function(e){
      filterSections(this);
      // let fliterSubjectValue = $('#filterArea');
      // filterSections(fliterSubjectValue, 1);
    });

  });

  function offerCoruse(ele){
    let course_id = $(ele).attr('id');
    let url = `/courses/${course_id}`;
    let attrs = `{"course":{"offer": ${ele.checked == true}}}`;

    $.ajax({
      url: url,
      type: 'PUT',
      data: JSON.parse(attrs),
      dataType: 'json',
      beforeSend: function(xhr) {
        xhr.setRequestHeader('X-CSRF-Token', $('meta[name="csrf-token"]').attr('content'));
      },
      success: function(json) {
        let td = ele.parentElement.parentElement.nextElementSibling
        if (json.type == `update`) {
          // td.innerHTML = json.new_section;  
          toastr.success(json.data);
        }else {
          td.textContent = "";
          toastr.info(json.data);
        }

      },
      error: function(json) {
        toastr.error(json.data);
      },
      unprocessable_entity: function(json) {
        toastr.error(json.data);
      }
    });

  }  

  function updateElem(ele){
    let url;
    let type;
    let  attrs = `{"course":{"academic_process_id": #{academic_process_id}, "subject_id": ${ele.value}}}`;
    if (ele.checked == true) {
      url = "/courses"
      type = 'POST'
    }else{
      url = "/courses/1"
      type = 'DELETE'
    }
    $.ajax({
      url: url,
      type: type,
      data: JSON.parse(attrs),
      dataType: 'json',
      beforeSend: function(xhr) {
        xhr.setRequestHeader('X-CSRF-Token', $('meta[name="csrf-token"]').attr('content'));
      },
      success: function(json) {
        let td_offer_subject = ele.parentElement.parentElement.nextElementSibling
        let td_section = td_offer_subject.nextElementSibling

        if (json.type == `create`) {
          td_section.innerHTML = json.new_section;  
          td_offer_subject.innerHTML = json.offer_subject;  
          toastr.success(json.data);
        }else {
          td_section.textContent = "";
          td_offer_subject.innerHTML = '';  
          toastr.info(json.data);
        }

      },
      error: function(json) {
        toastr.error(json.data);
      },
      unprocessable_entity: function(json) {
        toastr.error(json.data);
      }
    });

  }

  function filterSections(ele){
    var keyword = ele.value;
    keyword = keyword.toUpperCase();
    var table_1 = document.getElementById("programation");
    var all_tr = table_1.getElementsByClassName("trFiltrable");

    for(var i=0; i<all_tr.length; i++){
        var name_column = all_tr[i].getElementsByTagName("td")[1]; //[col];
        if(name_column){
            var name_value = name_column.textContent || name_column.innerText;
            name_value = name_value.toUpperCase();
            if(name_value.indexOf(keyword) > -1){

              all_tr[i].style.display = ""; // show
            }else{
              all_tr[i].style.display = "none"; // hide
            }
        }
    }

  }
